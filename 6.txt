dl 6
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import Dense
import zipfile
import requests
from io import BytesIO
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/00275/Bike-Sharing-Dataset.zip'
r = requests.get(url)
z = zipfile.ZipFile(BytesIO(r.content))
df = pd.read_csv(z.open('day.csv'))
print(df.head())
df=df.drop(['instant','dteday','casual','registered'],axis=1)
x=df.drop('cnt',axis=1)
y=df['cnt']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)
scaler=StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)
model=Sequential()
model.add(Dense(64,input_dim=x_train.shape[1], activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(1))
model.compile(optimizer='adam',loss='mean_squared_error')
history=model.fit(x_train,y_train,batch_size=16,epochs=50,verbose=0)
from sklearn.metrics import mean_squared_error
model.fit(x_train, y_train)
y_pred = model.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
print(f"\nMean Squared Error on Test Data: {mse:.2f}")
plt.plot(history.history['loss'])
plt.title('Training Loss Curve (Bike Rentals)')
plt.xlabel('Epochs')
plt.ylabel('Loss (MSE)')
plt.grid()
plt.show()

#dl 3
# 2. Import Libraries
import numpy as np
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Flatten
from keras.utils import to_categorical

# 3. Data Preparation
# Load MNIST data
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Convert labels: even = 0, odd = 1
y_train_binary = np.array([1 if y % 2 != 0 else 0 for y in y_train])
y_test_binary = np.array([1 if y % 2 != 0 else 0 for y in y_test])

# Normalize inputs
x_train = x_train / 255.0
x_test = x_test / 255.0

# 4. Model Definition
model = Sequential()
model.add(Flatten(input_shape=(28, 28)))  # Flatten image
model.add(Dense(128, activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(1, activation='sigmoid'))  # Binary classification

# 5. Compile the Model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# 6. Training
model.fit(x_train, y_train_binary, epochs=5, batch_size=128, validation_split=0.1)

# 7. Evaluation
loss, accuracy = model.evaluate(x_test, y_test_binary)
print(f"\nTest Accuracy: {accuracy:.4f}")

# 8. Conclusion
# The feedforward neural network can classify digits as even or odd with good accuracy.
